/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package trekbankDialogs;

import TrekbankExceptions.NoDateChosenException;
import TrekbankExceptions.NoObjectSelectedException;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import trekbank.MainScreen;
import trekbank.TableColumnAdjuster;
import trekbankDatabaseObjects.Database;
import trekbankDatabaseObjects.TestedObject;

/**
 *
 * @author Johnny
 */
public class searchTestedObjectDialog extends java.awt.Dialog{

    private static ArrayList<TestedObject> selectedObjects = new ArrayList<>();
    private Date fromDate;
    private Date toDate;
    
    private static SimpleDateFormat standardFormat = new SimpleDateFormat("dd-MM-yyyy");
    private static SimpleDateFormat sqlFormat = new SimpleDateFormat("yyyy-MM-dd");
    
    private DefaultTableModel model;
    private TableColumnAdjuster tca;
    private DefaultTableCellRenderer centerRenderer;
    
    private int progress;
    

    /**
     * Creates new form searchProjectDialog
     */
    private searchTestedObjectDialog(java.awt.Frame parent, boolean modal, boolean multipleSelect) {
        super(parent, modal);
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        initComponents();
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(new Point((screenSize.width - 500)/2, (screenSize.height - 650)/2));
        caseInsensitive.setBackground(new Color(214,217,223));
        confirmation.setBackground(new Color(214,217,223));
        
        selectedObjects = new ArrayList<>();
        resultField.setMultipleMode(multipleSelect);
        resultField.setVisible(false);
        
        Timestamp today = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
        
        fromDateChooser.setText(standardFormat.format(today));
        
        
        Date tomorrow = new Date(today.getTime() + (1000 * 60 * 60 * 24));
        toDateChooser.setText(standardFormat.format(tomorrow));    
        
        try {
            fromDate = standardFormat.parse(standardFormat.format(today));
            toDate = standardFormat.parse(standardFormat.format(tomorrow));
        } catch (ParseException e){
            System.err.println("Parse eror occured");
        }
        
        model = (DefaultTableModel) table.getModel();
        
        centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        foundObjects.setVisible(false);
        //////////////////////////////////////////////////////////////
        progress = 0;
        progressThread();
        searchObjects();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        resultField = new java.awt.List();
        caseInsensitive = new javax.swing.JCheckBox();
        searchDiscriptionField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        fromDateChooser = new javax.swing.JButton();
        toDateChooser = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        searchWorkerField = new javax.swing.JTextField();
        clearSelectedResults = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        deleteSelectedObjects = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        confirmation = new javax.swing.JCheckBox();
        foundObjects = new javax.swing.JLabel();
        queryProgress = new javax.swing.JProgressBar();

        jButton1.setText("jButton1");

        setBackground(new java.awt.Color(214, 217, 223));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);
        setFocusable(false);
        setLocationRelativeTo(null);
        setTitle("Geteste voorwerpen");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        resultField.setBackground(new java.awt.Color(255, 255, 255));
        resultField.setMultipleMode(true);

        caseInsensitive.setBackground(java.awt.Color.lightGray);
        caseInsensitive.setSelected(true);
        caseInsensitive.setText("Hoofdletter gevoeligheid");
        caseInsensitive.setToolTipText("Hier kunt u aangeven of gezocht moet worden met of zonder hoofdletters");
        caseInsensitive.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                caseInsensitiveItemStateChanged(evt);
            }
        });

        searchDiscriptionField.setToolTipText("Hier kunt u een beschrijving opgeven voor het voorwerp wat u zoekt");
        searchDiscriptionField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchDiscriptionFieldKeyReleased(evt);
            }
        });

        jLabel1.setText("Typ hier om te zoeken naar een beschrijving");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        okButton.setText("Ok");
        okButton.setToolTipText("Als u hier op klikt gebeurt er niks");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        fromDateChooser.setText("from date");
        fromDateChooser.setToolTipText("Vanaf deze datum wordt gezocht");
        fromDateChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromDateChooserActionPerformed(evt);
            }
        });

        toDateChooser.setText("to date");
        toDateChooser.setToolTipText("Tot deze datum wordt gezocht");
        toDateChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDateChooserActionPerformed(evt);
            }
        });

        jLabel2.setText("Typ hier om te zoeken naar een medewerker");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        searchWorkerField.setToolTipText("Hier kunt u opgeven welke medewerker het voorwerp getest heeft");
        searchWorkerField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchWorkerFieldKeyReleased(evt);
            }
        });

        clearSelectedResults.setText("Deselecteer alles");
        clearSelectedResults.setToolTipText("Als u hier op klikt is er niks meer geselecteerd");
        clearSelectedResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSelectedResultsActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID nummer", "Datum", "Getest Door", "Trekkracht", "Beschrijving"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setToolTipText("Hier worden alle zoek resultaten weergegeven");
        jScrollPane1.setViewportView(table);

        deleteSelectedObjects.setText("Verwijder geselecteerde objecten");
        deleteSelectedObjects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedObjectsActionPerformed(evt);
            }
        });

        cancelButton.setText("Annuleren");
        cancelButton.setToolTipText("Als u hier op klikt keert u terug naar waar u vandaan kwam");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        confirmation.setBackground(java.awt.Color.lightGray);
        confirmation.setSelected(true);
        confirmation.setText("Bevestigings berichten");
        confirmation.setToolTipText("Hier kunt u aangeven of u overal een bevestigings bericht voor wil");

        foundObjects.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteSelectedObjects, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                .addComponent(caseInsensitive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(confirmation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(toDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchDiscriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resultField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(foundObjects))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(clearSelectedResults, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchWorkerField, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(queryProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchDiscriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchWorkerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(caseInsensitive)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(confirmation)
                    .addComponent(resultField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(foundObjects))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(queryProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteSelectedObjects, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearSelectedResults, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void searchObjects() {
        String from = sqlFormat.format(fromDate);
        String to = sqlFormat.format(toDate);
        progress = 10;
        ArrayList<TestedObject> tos = Database.searchTestedObject(searchDiscriptionField.getText(), caseInsensitive.isSelected(), searchWorkerField.getText(), from, to);
        progress = 90;
        resultField.removeAll();
        
        for (int i = 0; i < model.getRowCount(); i++) model.removeRow(i);    
        model.setRowCount(0);
        table.removeAll();
        
        for (TestedObject t : tos) {
            resultField.add("Getest door: " + t.getWorkerName() + " --- Beschrijving: " + t.getBeschrijving());
            model.addRow(new Object[]{t.getId(), standardFormat.format(t.getTimeStamp()), t.getWorkerName(), t.getTrekKracht(), t.getBeschrijving()});
        }
        //tca.adjustColumns();
        foundObjects.setVisible(true);
        foundObjects.setText("Aantal gevonden voorwerpen: " + tos.size());
        progress = 100;
        progress = 0;
        
    }
    
    
    private void progressThread(){
        Thread t = new Thread("progressThread"){
          @Override
          public void run(){
              while (true) {
                  queryProgress.setValue(progress);
                  try { Thread.sleep(500);} catch (InterruptedException ex) {}
              }
          }  
        };
        t.start();
    }
    
    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void searchDiscriptionFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchDiscriptionFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchObjects();
        }
        
    }//GEN-LAST:event_searchDiscriptionFieldKeyReleased

    private void caseInsensitiveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_caseInsensitiveItemStateChanged
        // TODO add your handling code here:
        searchObjects();
    }//GEN-LAST:event_caseInsensitiveItemStateChanged

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        int[] selectedRows = table.getSelectedRows();
        for (int i = 0; i < selectedRows.length; i++){
            long id = (long) table.getValueAt(selectedRows[i], 0);
            selectedObjects.addAll(Database.searchTestedObject(id));
        }
        closeDialog(null);
    }//GEN-LAST:event_okButtonActionPerformed

    private void fromDateChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromDateChooserActionPerformed
        try {
            Date d = standardFormat.parse(fromDateChooser.getText());
            fromDate = Dialogs.showDateChooser(null, d);
            if (fromDate.after(toDate)) { 
                Date e = new Date(fromDate.getTime() + (1000 * 60 * 60 * 24));
                toDate = e;
                toDateChooser.setText(standardFormat.format(toDate));
            }
            fromDateChooser.setText(standardFormat.format(fromDate));  
        } catch (NoDateChosenException ex) {
        } catch (ParseException ex) {
            System.err.println("parse error");
        }

        searchObjects();
             
    }//GEN-LAST:event_fromDateChooserActionPerformed

    private void toDateChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDateChooserActionPerformed
        try {
            Date d = standardFormat.parse(toDateChooser.getText());
            toDate = Dialogs.showDateChooser(null, d);
            if (toDate.before(fromDate)) { 
                Date e = new Date(toDate.getTime() - (1000 * 60 * 60 * 24));
                fromDate = e;
                fromDateChooser.setText(standardFormat.format(fromDate));
            }
            toDateChooser.setText(standardFormat.format(toDate));
        } catch (NoDateChosenException ex) {
        } catch (ParseException ex) {
            System.err.println("parse error");
        }   
        searchObjects();
    }//GEN-LAST:event_toDateChooserActionPerformed

    private void searchWorkerFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchWorkerFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchObjects();
        }
        
    }//GEN-LAST:event_searchWorkerFieldKeyReleased

    private void clearSelectedResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSelectedResultsActionPerformed
        for (int i = 0; i < resultField.getItemCount(); i++){
            resultField.deselect(i);
        }
        table.clearSelection();     
    }//GEN-LAST:event_clearSelectedResultsActionPerformed

    private void deleteSelectedObjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedObjectsActionPerformed
        int[] selectedRows = table.getSelectedRows();
        if (selectedRows.length == 0 && confirmation.isSelected()) JOptionPane.showMessageDialog(null, "U heeft geen voorwerpen geselecteerd\nEr is niks verwijderd", "Niks geselecteerd", JOptionPane.INFORMATION_MESSAGE);
        for (int i = 0; i < selectedRows.length; i++){
            long id = (long) table.getValueAt(selectedRows[i], 0);
            String date = (String) table.getValueAt(selectedRows[i], 1);
            String discription = (String) table.getValueAt(selectedRows[i], 4);
            try {
                Database.deleteTestedObject(id, sqlFormat.format(standardFormat.parse(date)), discription, confirmation.isSelected());
            } catch (ParseException ex) {
                System.err.println("parse error");
            }
        }
        searchObjects();
    }//GEN-LAST:event_deleteSelectedObjectsActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        selectedObjects = new ArrayList<>();
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * This function shows a dialog where the user can search for projects
     * @param parent the parent frame
     * @return returns the selected projects
     * @throws NoProjectSelectedException if no project was selected or the cancel button was pressed
     */
    public static ArrayList<TestedObject> showDialog(java.awt.Frame parent, boolean multipleSelect) throws NoObjectSelectedException{
        searchTestedObjectDialog dialog = new searchTestedObjectDialog(parent, true, multipleSelect);
        dialog.setVisible(true);
        if (selectedObjects.isEmpty()){
            throw new NoObjectSelectedException();
        } else {        
            return selectedObjects;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox caseInsensitive;
    private javax.swing.JButton clearSelectedResults;
    private javax.swing.JCheckBox confirmation;
    private javax.swing.JButton deleteSelectedObjects;
    private javax.swing.JLabel foundObjects;
    private javax.swing.JButton fromDateChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JProgressBar queryProgress;
    private java.awt.List resultField;
    private javax.swing.JTextField searchDiscriptionField;
    private javax.swing.JTextField searchWorkerField;
    private javax.swing.JTable table;
    private javax.swing.JButton toDateChooser;
    // End of variables declaration//GEN-END:variables



}